#include <WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <math.h>

#define DHTPIN 18      // GPIO18 cho DHT22 (DATA)
#define DHTTYPE DHT22

// WiFi & MQTT
const char* ssid = "Wokwi-GUEST";
const char* password = "";
const char* mqtt_server = "broker.emqx.io";

// MQTT topics
const char* TOPIC_TEMP      = "tuanprohl/temp";
const char* TOPIC_HUM       = "tuanprohl/hum";
const char* TOPIC_TEMP_AVG  = "tuanprohl/temp_avg";
const char* TOPIC_HUM_AVG   = "tuanprohl/hum_avg";
const char* TOPIC_LCD_TEXT  = "tuanprohl/lcd_text"; // topic nh·∫≠n text t·ª´ web

// LCD I2C
static const uint8_t LCD_ADDR = 0x27; // Wokwi LCD2004 I2C m·∫∑c ƒë·ªãnh
static const uint8_t LCD_COLS = 20;
static const uint8_t LCD_ROWS = 4;

// Gi·ªõi h·∫°n ƒë·ªô d√†i d√≤ng ƒë·ªÉ tr√°nh t·ªën RAM (c√≥ th·ªÉ tƒÉng n·∫øu c·∫ßn)
static const uint16_t MAX_LINE_LEN = 128;

// Objects
DHT dht(DHTPIN, DHTTYPE);
WiFiClient espClient;
PubSubClient client(espClient);
LiquidCrystal_I2C lcd(LCD_ADDR, LCD_COLS, LCD_ROWS);

// DHT tracking
float prevTemp = NAN;
float prevHum  = NAN;
float lastTemps[3] = {NAN, NAN, NAN};
float lastHums[3]  = {NAN, NAN, NAN};

// LCD scrolling state
String lcdRaw[LCD_ROWS] = {"", "", "", ""};   // n·ªôi dung th·∫≠t c·ªßa t·ª´ng d√≤ng (kh√¥ng c·∫Øt)
uint16_t lcdLen[LCD_ROWS] = {0, 0, 0, 0};     // ƒë·ªô d√†i t·ª´ng d√≤ng
uint16_t lcdOffset[LCD_ROWS] = {0, 0, 0, 0};  // v·ªã tr√≠ scroll hi·ªán t·∫°i cho t·ª´ng d√≤ng
unsigned long lastScrollMs = 0;
const unsigned long SCROLL_INTERVAL_MS = 350; // t·ªëc ƒë·ªô cu·ªôn (ms)

// T·∫°o c·ª≠a s·ªï hi·ªÉn th·ªã 20 k√Ω t·ª± v·ªõi offset, c√≥ wrap v·ªÅ ƒë·∫ßu
String window20(const String& s, uint8_t width, uint16_t offset) {
  uint16_t L = s.length();
  if (L == 0) return String(' ', width);
  if (L <= width) {
    String out = s;
    while (out.length() < width) out += ' ';
    return out;
  }
  String out; out.reserve(width);
  for (uint8_t i = 0; i < width; i++) {
    out += s[(offset + i) % L];
  }
  return out;
}

void renderLcdAll() {
  for (uint8_t r = 0; r < LCD_ROWS; r++) {
    String view = window20(lcdRaw[r], LCD_COLS, lcdOffset[r]);
    lcd.setCursor(0, r);
    lcd.print(view);
  }
}

void scrollTask() {
  unsigned long now = millis();
  if (now - lastScrollMs < SCROLL_INTERVAL_MS) return;
  lastScrollMs = now;

  bool anyScrolled = false;
  for (uint8_t r = 0; r < LCD_ROWS; r++) {
    if (lcdLen[r] > LCD_COLS) {
      lcdOffset[r] = (lcdOffset[r] + 1) % lcdLen[r];
      anyScrolled = true;
    }
  }
  if (anyScrolled) {
    renderLcdAll();
  }
}

// ---- WiFi/MQTT ----
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("ƒêang k·∫øt n·ªëi WiFi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\n  ‚úÖ WiFi connected");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void handleLcdPayload(const String& data) {
  Serial.println("üì• LCD payload nh·∫≠n ƒë∆∞·ª£c:");
  Serial.println(data);

  // T√°ch t·ªëi ƒëa 4 d√≤ng theo '\n'
  String lines[LCD_ROWS];
  uint8_t row = 0;
  String cur = "";
  for (unsigned int i = 0; i < data.length() && row < LCD_ROWS; i++) {
    char c = data[i];
    if (c == '\r') continue; // b·ªè CR
    if (c == '\n') {
      lines[row++] = cur;
      cur = "";
      if (row >= LCD_ROWS) break;
    } else {
      cur += c;
    }
  }
  if (row < LCD_ROWS) {
    lines[row++] = cur;
    while (row < LCD_ROWS) lines[row++] = "";
  }

  // L∆∞u v√†o tr·∫°ng th√°i scrolling, c·∫Øt tr·∫ßn ·ªü MAX_LINE_LEN ƒë·ªÉ tr√°nh qu√° d√†i
  for (uint8_t r = 0; r < LCD_ROWS; r++) {
    if (lines[r].length() > MAX_LINE_LEN) {
      lcdRaw[r] = lines[r].substring(0, MAX_LINE_LEN);
    } else {
      lcdRaw[r] = lines[r];
    }
    lcdLen[r] = lcdRaw[r].length();
    lcdOffset[r] = 0; // reset offset khi c√≥ n·ªôi dung m·ªõi
  }

  // In khung ban ƒë·∫ßu
  renderLcdAll();
  Serial.println("üñ®Ô∏è ƒê√£ in l√™n LCD 20x4 (cu·ªôn n·∫øu > 20 k√Ω t·ª±).");
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String tpc = String(topic);
  String data; data.reserve(length);
  for (unsigned int i = 0; i < length; i++) {
    data += (char)payload[i];
  }

  if (tpc == TOPIC_LCD_TEXT) {
    handleLcdPayload(data);
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("ƒêang k·∫øt n·ªëi MQTT...");
    String clientId = "ESP32Client-" + String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi!");
      client.subscribe(TOPIC_LCD_TEXT);
      Serial.print("üîî Subscribed: ");
      Serial.println(TOPIC_LCD_TEXT);
    } else {
      Serial.print("‚ùå failed, rc=");
      Serial.print(client.state());
      Serial.println(" th·ª≠ l·∫°i sau 5s");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);

  // DHT
  dht.begin();

  // WiFi + MQTT
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(mqttCallback);

  // I2C + LCD (ESP32: ch·ªâ ƒë·ªãnh SDA=21, SCL=22 ƒë·ªÉ kh·ªõp s∆° ƒë·ªì)
  Wire.begin(21, 22);
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("ESP32 LCD 20x4");
  lcd.setCursor(0, 1);
  lcd.print("Waiting for text");
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Cu·ªôn LCD n·∫øu c·∫ßn
  scrollTask();

  // ƒê·ªçc DHT22 v√† publish n·∫øu thay ƒë·ªïi >= 5 ƒë∆°n v·ªã
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t)) {
    Serial.println("‚ö†Ô∏è L·ªói ƒë·ªçc DHT22");
    delay(2000);
    return;
  }

  bool tempChanged = isnan(prevTemp) || fabs(t - prevTemp) >= 5.0;
  bool humChanged  = isnan(prevHum)  || fabs(h - prevHum)  >= 5.0;

  if (tempChanged) {
    String tempStr = String(t, 1);
    client.publish(TOPIC_TEMP, tempStr.c_str());
    Serial.print("üì§ Nhi·ªát ƒë·ªô g·ª≠i: ");
    Serial.println(tempStr);

    // C·∫≠p nh·∫≠t m·∫£ng 3 l·∫ßn g·∫ßn nh·∫•t (nhi·ªát ƒë·ªô)
    lastTemps[2] = lastTemps[1];
    lastTemps[1] = lastTemps[0];
    lastTemps[0] = t;

    // T√≠nh trung b√¨nh n·∫øu ƒë√£ c√≥ ƒë·ªß 3 l·∫ßn
    if (!isnan(lastTemps[0]) && !isnan(lastTemps[1]) && !isnan(lastTemps[2])) {
      float avgTemp = (lastTemps[0] + lastTemps[1] + lastTemps[2]) / 3.0;
      String avgStr = String(avgTemp, 1);
      client.publish(TOPIC_TEMP_AVG, avgStr.c_str());
    }

    prevTemp = t;
  }

  if (humChanged) {
    String humStr = String(h, 1);
    client.publish(TOPIC_HUM, humStr.c_str());
    Serial.print("üì§ ƒê·ªô ·∫©m g·ª≠i: ");
    Serial.println(humStr);

    // C·∫≠p nh·∫≠t m·∫£ng 3 l·∫ßn g·∫ßn nh·∫•t (ƒë·ªô ·∫©m)
    lastHums[2] = lastHums[1];
    lastHums[1] = lastHums[0];
    lastHums[0] = h;

    // T√≠nh trung b√¨nh n·∫øu ƒë√£ c√≥ ƒë·ªß 3 l·∫ßn
    if (!isnan(lastHums[0]) && !isnan(lastHums[1]) && !isnan(lastHums[2])) {
      float avgHum = (lastHums[0] + lastHums[1] + lastHums[2]) / 3.0;
      String avgStr = String(avgHum, 1);
      client.publish(TOPIC_HUM_AVG, avgStr.c_str());
    }

    prevHum = h;
  }

  delay(30); // gi·ªØ v√≤ng l·∫∑p m∆∞·ª£t, scrollTask d√πng millis n√™n kh√¥ng ph·ª• thu·ªôc delay l·ªõn
}